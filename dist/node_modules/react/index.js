(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.index = factory());
})(this, (function () { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/* eslint-disable @typescript-eslint/no-explicit-any */
	// ReactElement
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'KaSong' // 与真实的react区分
	    };
	    return element;
	};
	/**
	 * 本例中代码中开发环境的的jsx和生产环境的jsx是一个实现。
	 * react库实际上不是
	 */
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== 'undefined') {
	                key = '' + val; // key的值是个字符串
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== 'undefined') {
	                ref = val;
	            }
	            continue;
	        }
	        // 是它自己而不是原型上的就赋值给props 不懂？？？
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	// React
	var index = {
	    version: '0.0.0',
	    createElement: jsxDEV
	};

	return index;

}));
